#!/bin/bash

echo "üîß CORRE√á√ÉO PRODU√á√ÉO - ATI LDAP MANAGER"
echo "======================================="
echo "üåê Servidor: $(hostname)"
echo "üìÖ Data/Hora: $(date)"
echo ""

# Verificar se est√° no diret√≥rio correto
if [ ! -f "composer.json" ]; then
    echo "‚ùå Execute este script no diret√≥rio do projeto!"
    echo "üí° Procure por: find /home -name composer.json -path '*ati-ldap-manager*'"
    exit 1
fi

echo "1Ô∏è‚É£ PARANDO CONTAINERS ANTIGOS"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
sudo ./vendor/bin/sail down 2>/dev/null || echo "‚ö†Ô∏è  Sail down falhou (containers podem n√£o estar rodando)"
sudo docker stop $(sudo docker ps -q) 2>/dev/null || echo "‚ö†Ô∏è  Nenhum container para parar"

echo ""
echo "2Ô∏è‚É£ LIMPANDO SISTEMA DOCKER"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
sudo docker system prune -f
sudo docker volume prune -f

echo ""
echo "3Ô∏è‚É£ VERIFICANDO/INSTALANDO DEPEND√äNCIAS"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
if [ ! -d "vendor" ]; then
    echo "üì¶ Instalando depend√™ncias do Composer..."
    if command -v composer &> /dev/null; then
        sudo composer install --no-dev --optimize-autoloader
    else
        echo "‚ùå Composer n√£o encontrado! Instale primeiro:"
        echo "   curl -sS https://getcomposer.org/installer | php"
        echo "   sudo mv composer.phar /usr/local/bin/composer"
        exit 1
    fi
else
    echo "‚úÖ Depend√™ncias j√° instaladas"
fi

echo ""
echo "4Ô∏è‚É£ CONFIGURANDO ARQUIVO .env"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
if [ ! -f ".env" ]; then
    if [ -f ".env.example" ]; then
        echo "üìã Copiando .env.example para .env..."
        sudo cp .env.example .env
        echo "‚úÖ .env criado"
    else
        echo "‚ùå .env.example n√£o encontrado!"
        exit 1
    fi
else
    echo "‚úÖ .env j√° existe"
fi

# Verificar se APP_KEY est√° configurada
if grep -q "^APP_KEY=$" .env || ! grep -q "^APP_KEY=" .env; then
    echo "üîë APP_KEY n√£o configurada, configurando para produ√ß√£o..."
    
    # Configurar para produ√ß√£o primeiro
    sudo sed -i 's/^APP_ENV=.*/APP_ENV=production/' .env
    sudo sed -i 's/^APP_DEBUG=.*/APP_DEBUG=false/' .env
    
    echo "‚ö†Ô∏è  CONFIGURA√á√ÉO CR√çTICA: .env deve ter estas configura√ß√µes para PRODU√á√ÉO:"
    echo ""
    echo "APP_ENV=production"
    echo "APP_DEBUG=false"
    echo "APP_URL=http://10.238.124.200  # ou o dom√≠nio correto"
    echo ""
    echo "# Banco de dados:"
    echo "DB_CONNECTION=pgsql"
    echo "DB_HOST=pgsql"
    echo "DB_PORT=5432"
    echo "DB_DATABASE=atildaplogs"
    echo "DB_USERNAME=ati"
    echo "DB_PASSWORD=123456"
    echo ""
    echo "# LDAP - configure conforme seu ambiente:"
    echo "LDAP_CONNECTION=default"
    echo "LDAP_HOST=SEU_SERVIDOR_LDAP"
    echo "LDAP_USERNAME=cn=admin,dc=exemplo,dc=com"
    echo "LDAP_PASSWORD=SUA_SENHA_LDAP"
    echo "LDAP_BASE_DN=dc=exemplo,dc=com"
    echo ""
    echo "‚è∏Ô∏è  SCRIPT PAUSADO - Configure o .env acima e pressione ENTER para continuar..."
    read -p ""
fi

echo ""
echo "5Ô∏è‚É£ CORRIGINDO PERMISS√ïES"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
directories=("storage" "storage/app" "storage/framework" "storage/logs" "bootstrap/cache")

for dir in "${directories[@]}"; do
    if [ ! -d "$dir" ]; then
        echo "üìÅ Criando $dir..."
        sudo mkdir -p "$dir"
    fi
    
    echo "üîß Corrigindo permiss√µes: $dir"
    sudo chmod -R 775 "$dir"
    sudo chown -R www-data:www-data "$dir" 2>/dev/null || \
    sudo chown -R $USER:$USER "$dir" 2>/dev/null || \
    echo "   ‚ö†Ô∏è  N√£o foi poss√≠vel alterar owner"
done

echo ""
echo "6Ô∏è‚É£ INICIANDO CONTAINERS"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "üê≥ Iniciando Docker Compose..."
sudo ./vendor/bin/sail up -d

echo ""
echo "7Ô∏è‚É£ AGUARDANDO CONTAINERS SUBIREM..."
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
sleep 15

echo "üìä Status dos containers:"
sudo ./vendor/bin/sail ps

echo ""
echo "8Ô∏è‚É£ CONFIGURANDO APLICA√á√ÉO"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Gerar chave da aplica√ß√£o
echo "üîë Gerando chave da aplica√ß√£o..."
sudo ./vendor/bin/sail artisan key:generate --force

# Limpar caches
echo "üßπ Limpando caches..."
sudo ./vendor/bin/sail artisan config:clear
sudo ./vendor/bin/sail artisan cache:clear
sudo ./vendor/bin/sail artisan view:clear
sudo ./vendor/bin/sail artisan route:clear

# Executar migra√ß√µes
echo "üìä Executando migra√ß√µes..."
sudo ./vendor/bin/sail artisan migrate --force

echo ""
echo "9Ô∏è‚É£ OTIMIZA√á√ïES PARA PRODU√á√ÉO"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "‚ö° Otimizando configura√ß√£o..."
sudo ./vendor/bin/sail artisan config:cache
sudo ./vendor/bin/sail artisan route:cache
sudo ./vendor/bin/sail artisan view:cache

echo ""
echo "üîü TESTANDO APLICA√á√ÉO"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Aguardar mais um pouco
sleep 5

echo "üåê Testando conectividade..."

# Testar localhost
echo "üîó Teste localhost:"
status_local=$(sudo ./vendor/bin/sail exec laravel.test curl -s -o /dev/null -w "%{http_code}" http://localhost 2>/dev/null)
echo "   Status: $status_local"

# Testar pelo IP externo
echo "üîó Teste IP externo (10.238.124.200):"
status_external=$(curl -s -o /dev/null -w "%{http_code}" http://10.238.124.200 2>/dev/null)
echo "   Status: $status_external"

echo ""
echo "‚úÖ CORRE√á√ÉO CONCLU√çDA!"
echo "====================="
echo ""

# Verificar status final
if [ "$status_local" = "200" ] || [ "$status_external" = "200" ]; then
    echo "üéâ SUCESSO! Aplica√ß√£o respondendo corretamente!"
    echo ""
    echo "üåê Acesse a aplica√ß√£o em:"
    echo "   http://10.238.124.200"
    echo ""
    echo "üìã Para monitorar logs:"
    echo "   sudo ./vendor/bin/sail logs -f"
else
    echo "‚ö†Ô∏è  APLICA√á√ÉO AINDA N√ÉO EST√Å RESPONDENDO"
    echo ""
    echo "üîç Pr√≥ximos passos para debug:"
    echo ""
    echo "1. Verificar logs em tempo real:"
    echo "   sudo ./vendor/bin/sail logs -f"
    echo ""
    echo "2. Verificar containers:"
    echo "   sudo ./vendor/bin/sail ps"
    echo ""
    echo "3. Verificar configura√ß√£o .env:"
    echo "   cat .env | grep -E '^(APP_|DB_|LDAP_)'"
    echo ""
    echo "4. Testar dentro do container:"
    echo "   sudo ./vendor/bin/sail exec laravel.test curl -I http://localhost"
    echo ""
    echo "5. Verificar processos dentro do container:"
    echo "   sudo ./vendor/bin/sail exec laravel.test ps aux"
    echo ""
    echo "6. Executar diagn√≥stico completo:"
    echo "   chmod +x production-diagnostics.sh"
    echo "   ./production-diagnostics.sh"
fi

echo ""
echo "üìä STATUS FINAL DOS CONTAINERS:"
sudo ./vendor/bin/sail ps

echo ""
echo "üîö Script finalizado em $(date)" 