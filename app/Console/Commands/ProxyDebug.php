<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\URL;

class ProxyDebug extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'proxy:debug';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Debug configura√ß√µes de proxy reverso HTTPS';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üîç DEBUG PROXY REVERSO HTTPS');
        $this->info('============================');
        $this->newLine();

        // Configura√ß√µes do .env
        $this->info('üìÑ CONFIGURA√á√ïES .env:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        $this->line('APP_URL: ' . config('app.url'));
        $this->line('APP_ENV: ' . config('app.env'));
        $this->line('APP_DEBUG: ' . (config('app.debug') ? 'true' : 'false'));
        $this->line('TRUSTED_PROXIES: ' . env('TRUSTED_PROXIES', 'n√£o definido'));
        $this->newLine();

        // Headers da requisi√ß√£o
        $this->info('üåê HEADERS DE PROXY:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        $headers = [
            'HTTP_X_FORWARDED_PROTO' => 'X-Forwarded-Proto',
            'HTTP_X_FORWARDED_SSL' => 'X-Forwarded-SSL',
            'HTTP_X_FORWARDED_PORT' => 'X-Forwarded-Port',
            'HTTP_X_FORWARDED_FOR' => 'X-Forwarded-For',
            'HTTP_X_REAL_IP' => 'X-Real-IP',
            'HTTP_CF_VISITOR' => 'CF-Visitor',
            'HTTPS' => 'HTTPS',
            'SERVER_PORT' => 'SERVER_PORT',
        ];

        foreach ($headers as $serverKey => $displayName) {
            $value = $_SERVER[$serverKey] ?? 'n√£o definido';
            $this->line("$displayName: $value");
        }
        $this->newLine();

        // Status da aplica√ß√£o
        $this->info('‚öôÔ∏è STATUS DA APLICA√á√ÉO:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        
        $request = request();
        $this->line('Scheme detectado: ' . $request->getScheme());
        $this->line('Host detectado: ' . $request->getHost());
        $this->line('URL base: ' . $request->getSchemeAndHttpHost());
        $this->line('√â HTTPS: ' . ($request->isSecure() ? 'SIM' : 'N√ÉO'));
        $this->line('Porta: ' . $request->getPort());
        $this->newLine();

        // URLs geradas pelo Laravel
        $this->info('üîó URLs GERADAS PELO LARAVEL:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        $this->line('URL raiz: ' . url('/'));
        $this->line('URL login: ' . route('login'));
        $this->line('Asset URL: ' . asset('favicon.ico'));
        $this->line('Scheme for√ßado: ' . (URL::isValidUrl('https://example.com') ? 'detectado' : 'n√£o detectado'));
        $this->newLine();

        // Detec√ß√£o de proxy
        $this->info('üîç DETEC√á√ÉO DE PROXY:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        
        $isHttpsProxy = $this->isRequestFromHttpsProxy();
        $this->line('Proxy HTTPS detectado: ' . ($isHttpsProxy ? 'SIM' : 'N√ÉO'));
        
        if ($isHttpsProxy) {
            $this->line('‚úÖ Proxy HTTPS est√° sendo detectado corretamente');
        } else {
            $this->error('‚ùå Proxy HTTPS N√ÉO est√° sendo detectado');
            $this->warn('Verifique se o proxy est√° enviando os headers corretos');
        }
        $this->newLine();

        // Verifica√ß√µes de seguran√ßa
        $this->info('üîí VERIFICA√á√ïES DE SEGURAN√áA:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        
        // CSRF
        try {
            $csrfToken = csrf_token();
            $this->line('CSRF Token: ' . substr($csrfToken, 0, 20) . '...');
        } catch (\Exception $e) {
            $this->error('CSRF Token: ERRO - ' . $e->getMessage());
        }

        // Session
        if (session()->isStarted()) {
            $this->line('Session: ATIVA (ID: ' . substr(session()->getId(), 0, 10) . '...)');
        } else {
            $this->error('Session: N√ÉO ATIVA');
        }
        $this->newLine();

        // Recomenda√ß√µes
        $this->info('üí° RECOMENDA√á√ïES:');
        $this->info('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        
        if (!$isHttpsProxy) {
            $this->warn('1. Verifique se o proxy est√° enviando X-Forwarded-Proto: https');
            $this->warn('2. Configure o proxy para enviar headers corretos');
            $this->warn('3. Teste com: curl -H "X-Forwarded-Proto: https" http://localhost');
        }
        
        if (config('app.url') !== 'https://contas.gravata.sei.pe.gov.br') {
            $this->warn('4. Configure APP_URL=https://contas.gravata.sei.pe.gov.br no .env');
        }
        
        if (config('app.env') !== 'production') {
            $this->warn('5. Configure APP_ENV=production no .env');
        }
        
        if (config('app.debug')) {
            $this->warn('6. Configure APP_DEBUG=false no .env para produ√ß√£o');
        }
        
        $this->newLine();
        $this->info('‚úÖ Debug conclu√≠do!');
    }

    /**
     * Verificar se a requisi√ß√£o veio de um proxy HTTPS
     * (mesma l√≥gica do AppServiceProvider)
     */
    private function isRequestFromHttpsProxy(): bool
    {
        return (
            // Header X-Forwarded-Proto indica HTTPS
            (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') ||
            
            // Header X-Forwarded-SSL indica SSL ativo
            (isset($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] === 'on') ||
            
            // Header X-Forwarded-Port indica porta 443
            (isset($_SERVER['HTTP_X_FORWARDED_PORT']) && $_SERVER['HTTP_X_FORWARDED_PORT'] === '443') ||
            
            // Cloudflare headers
            (isset($_SERVER['HTTP_CF_VISITOR']) && strpos($_SERVER['HTTP_CF_VISITOR'], 'https') !== false) ||
            
            // AWS Load Balancer
            (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') ||
            
            // Nginx proxy comum
            (isset($_SERVER['HTTP_X_REAL_IP']) && isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https')
        );
    }
} 