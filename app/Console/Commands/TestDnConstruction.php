<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Utils\LdapDnUtils;

class TestDnConstruction extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'test:dn-construction {uid} {ou}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Testa e debuga constru√ß√£o de Distinguished Names (DN)';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $uid = $this->argument('uid');
        $ou = $this->argument('ou');

        $this->info('üîç Teste de Constru√ß√£o de DN');
        $this->info('============================');
        
        $this->line("UID fornecido: '{$uid}'");
        $this->line("OU fornecida: '{$ou}'");

        // 1. Informa√ß√µes b√°sicas
        $baseDn = config('ldap.connections.default.base_dn');
        $this->info("\n1Ô∏è‚É£ Configura√ß√£o Base:");
        $this->line("Base DN: {$baseDn}");

        // 2. Teste de caracteres problem√°ticos
        $this->info("\n2Ô∏è‚É£ An√°lise de Caracteres:");
        $this->analyzeString('UID', $uid);
        $this->analyzeString('OU', $ou);

        // 3. Constru√ß√£o DN original (problem√°tica)
        $this->info("\n3Ô∏è‚É£ DN Original (pode estar problem√°tico):");
        $originalDn = "uid={$uid},ou={$ou},{$baseDn}";
        $this->line("DN: {$originalDn}");
        $this->checkDnSyntax($originalDn);

        // 4. DN com escape de caracteres
        $this->info("\n4Ô∏è‚É£ DN com Escape de Caracteres:");
        $escapedUid = $this->escapeDnValue($uid);
        $escapedOu = $this->escapeDnValue($ou);
        $escapedDn = "uid={$escapedUid},ou={$escapedOu},{$baseDn}";
        $this->line("UID escapado: '{$escapedUid}'");
        $this->line("OU escapada: '{$escapedOu}'");
        $this->line("DN escapado: {$escapedDn}");
        $this->checkDnSyntax($escapedDn);

        // 5. DN normalizado
        $this->info("\n5Ô∏è‚É£ DN Normalizado:");
        $normalizedUid = $this->normalizeDnValue($uid);
        $normalizedOu = $this->normalizeDnValue($ou);
        $normalizedDn = "uid={$normalizedUid},ou={$normalizedOu},{$baseDn}";
        $this->line("UID normalizado: '{$normalizedUid}'");
        $this->line("OU normalizada: '{$normalizedOu}'");
        $this->line("DN normalizado: {$normalizedDn}");
        $this->checkDnSyntax($normalizedDn);

        // 6. Recomenda√ß√µes
        $this->info("\n6Ô∏è‚É£ Recomenda√ß√µes:");
        if ($this->hasProblematicChars($uid) || $this->hasProblematicChars($ou)) {
            $this->warn("‚ö†Ô∏è  Caracteres problem√°ticos detectados!");
            $this->line("üí° Use o DN escapado ou normalizado");
        } else {
            $this->info("‚úÖ Valores parecem seguros para DN");
        }

        // 7. Teste com classe utilit√°ria
        $this->info("\n7Ô∏è‚É£ Usando LdapDnUtils (RECOMENDADO):");
        $utilsDn = LdapDnUtils::buildUserDn($uid, $ou, $baseDn);
        $this->line("DN com LdapDnUtils: {$utilsDn}");
        $this->checkDnSyntax($utilsDn);
        
        // Valida√ß√µes da classe utilit√°ria
        $this->line("UID v√°lido: " . (LdapDnUtils::isValidDnValue($uid) ? 'Sim' : 'N√£o'));
        $this->line("OU v√°lida: " . (LdapDnUtils::isValidDnValue($ou) ? 'Sim' : 'N√£o'));
        $this->line("UID tem caracteres problem√°ticos: " . (LdapDnUtils::hasProblematicChars($uid) ? 'Sim' : 'N√£o'));
        $this->line("OU tem caracteres problem√°ticos: " . (LdapDnUtils::hasProblematicChars($ou) ? 'Sim' : 'N√£o'));

        // 8. Teste com ldap_escape (se dispon√≠vel)
        if (function_exists('ldap_escape')) {
            $this->info("\n8Ô∏è‚É£ Usando ldap_escape do PHP:");
            $phpEscapedUid = ldap_escape($uid, '', LDAP_ESCAPE_DN);
            $phpEscapedOu = ldap_escape($ou, '', LDAP_ESCAPE_DN);
            $phpEscapedDn = "uid={$phpEscapedUid},ou={$phpEscapedOu},{$baseDn}";
            $this->line("DN com ldap_escape: {$phpEscapedDn}");
            $this->checkDnSyntax($phpEscapedDn);
        }

        return 0;
    }

    private function analyzeString($label, $value)
    {
        $this->line("  {$label}:");
        $this->line("    Comprimento: " . strlen($value));
        $this->line("    Tem espa√ßos: " . (strpos($value, ' ') !== false ? 'Sim' : 'N√£o'));
        $this->line("    Tem v√≠rgulas: " . (strpos($value, ',') !== false ? 'Sim' : 'N√£o'));
        $this->line("    Tem aspas: " . (strpos($value, '"') !== false ? 'Sim' : 'N√£o'));
        $this->line("    Tem caracteres especiais: " . ($this->hasProblematicChars($value) ? 'Sim' : 'N√£o'));
        
        if ($this->hasProblematicChars($value)) {
            $problematic = $this->getProblematicChars($value);
            $this->warn("    ‚ö†Ô∏è  Caracteres problem√°ticos: " . implode(', ', $problematic));
        }
    }

    private function hasProblematicChars($value)
    {
        // Caracteres que podem causar problemas em DN
        $problematicChars = [',', '"', '\\', '/', '<', '>', ';', '=', '+', '#'];
        
        foreach ($problematicChars as $char) {
            if (strpos($value, $char) !== false) {
                return true;
            }
        }
        
        // Verificar espa√ßos no in√≠cio/fim
        return trim($value) !== $value;
    }

    private function getProblematicChars($value)
    {
        $problematicChars = [',', '"', '\\', '/', '<', '>', ';', '=', '+', '#'];
        $found = [];
        
        foreach ($problematicChars as $char) {
            if (strpos($value, $char) !== false) {
                $found[] = "'{$char}'";
            }
        }
        
        if (trim($value) !== $value) {
            $found[] = 'espa√ßos in√≠cio/fim';
        }
        
        return $found;
    }

    private function escapeDnValue($value)
    {
        // Escape de caracteres especiais para DN
        $escapeMap = [
            '\\' => '\\\\',
            ',' => '\\,',
            '"' => '\\"',
            '/' => '\\/',
            '<' => '\\<',
            '>' => '\\>',
            ';' => '\\;',
            '=' => '\\=',
            '+' => '\\+',
            '#' => '\\#'
        ];
        
        $escaped = $value;
        foreach ($escapeMap as $char => $replacement) {
            $escaped = str_replace($char, $replacement, $escaped);
        }
        
        // Remover espa√ßos in√≠cio/fim
        return trim($escaped);
    }

    private function normalizeDnValue($value)
    {
        // Normaliza√ß√£o mais agressiva
        $normalized = trim($value);
        
        // Remover/substituir caracteres problem√°ticos
        $normalized = preg_replace('/[,"\/<>;=+#\\\\]/', '', $normalized);
        
        // Converter espa√ßos m√∫ltiplos em √∫nico
        $normalized = preg_replace('/\s+/', ' ', $normalized);
        
        // Remover espa√ßos
        $normalized = trim($normalized);
        
        return $normalized;
    }

    private function checkDnSyntax($dn)
    {
        // Verifica√ß√µes b√°sicas de sintaxe DN
        $issues = [];
        
        // Verificar se tem v√≠rgulas n√£o escapadas problem√°ticas
        if (preg_match('/[^\\\\],/', $dn)) {
            // Esta √© uma verifica√ß√£o muito b√°sica
        }
        
        // Verificar espa√ßos suspeitos
        if (preg_match('/\s{2,}/', $dn)) {
            $issues[] = 'Espa√ßos m√∫ltiplos detectados';
        }
        
        // Verificar se termina corretamente
        if (!preg_match('/dc=\w+/', $dn)) {
            $issues[] = 'DN n√£o termina com componente dc v√°lido';
        }
        
        if (empty($issues)) {
            $this->info("  ‚úÖ Sintaxe parece v√°lida");
        } else {
            foreach ($issues as $issue) {
                $this->warn("  ‚ö†Ô∏è  {$issue}");
            }
        }
    }
} 