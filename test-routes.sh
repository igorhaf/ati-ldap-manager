#!/bin/bash

BASE_URL="http://localhost:8000"

echo "üîç Testando rotas do Gerenciador LDAP..."
echo "========================================"
echo ""

# Fun√ß√£o para obter CSRF token
get_csrf_token() {
    # Primeiro, vamos tentar obter o token da p√°gina principal
    TOKEN=$(curl -s "$BASE_URL/ldap-manager" | grep -o 'name="_token" value="[^"]*"' | cut -d'"' -f4)
    
    if [ -z "$TOKEN" ]; then
        # Se n√£o encontrar, vamos tentar da p√°gina inicial
        TOKEN=$(curl -s "$BASE_URL" | grep -o 'name="_token" value="[^"]*"' | cut -d'"' -f4)
    fi
    
    echo $TOKEN
}

CSRF_TOKEN=$(get_csrf_token)

if [ -z "$CSRF_TOKEN" ]; then
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel obter o CSRF token. Alguns testes podem falhar."
    echo "   Isso √© normal se o servidor n√£o estiver rodando ou se n√£o houver sess√£o ativa."
    echo ""
fi

# Fun√ß√£o para testar uma rota
test_route() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    echo "üß™ $description"
    echo "   $method $endpoint"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -X GET "$BASE_URL$endpoint")
    elif [ "$method" = "POST" ]; then
        if [ -n "$CSRF_TOKEN" ]; then
            response=$(curl -s -X POST "$BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -H "X-CSRF-TOKEN: $CSRF_TOKEN" \
                -d "$data")
        else
            response=$(curl -s -X POST "$BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -d "$data")
        fi
    elif [ "$method" = "PUT" ]; then
        if [ -n "$CSRF_TOKEN" ]; then
            response=$(curl -s -X PUT "$BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -H "X-CSRF-TOKEN: $CSRF_TOKEN" \
                -d "$data")
        else
            response=$(curl -s -X PUT "$BASE_URL$endpoint" \
                -H "Content-Type: application/json" \
                -d "$data")
        fi
    elif [ "$method" = "DELETE" ]; then
        if [ -n "$CSRF_TOKEN" ]; then
            response=$(curl -s -X DELETE "$BASE_URL$endpoint" \
                -H "X-CSRF-TOKEN: $CSRF_TOKEN")
        else
            response=$(curl -s -X DELETE "$BASE_URL$endpoint")
        fi
    fi
    
    # Verificar se a resposta cont√©m sucesso
    if echo "$response" | grep -q '"success":true'; then
        echo "   ‚úÖ Sucesso"
    elif echo "$response" | grep -q '"success":false'; then
        echo "   ‚ùå Falha"
        echo "   Resposta: $response"
    else
        echo "   ‚ö†Ô∏è  Resposta inesperada"
        echo "   Resposta: $response"
    fi
    echo ""
}

# Teste 1: Listar usu√°rios
test_route "GET" "/api/ldap/users" "" "Listando todos os usu√°rios"

# Teste 2: Listar unidades organizacionais
test_route "GET" "/api/ldap/organizational-units" "" "Listando unidades organizacionais"

# Teste 3: Criar unidade organizacional de teste
test_route "POST" "/api/ldap/organizational-units" '{"ou": "Teste", "description": "Unidade de teste para valida√ß√£o"}' "Criando unidade organizacional de teste"

# Teste 4: Criar usu√°rio de teste
test_route "POST" "/api/ldap/users" '{
    "uid": "teste.user",
    "givenName": "Usu√°rio",
    "sn": "Teste",
    "employeeNumber": "99999",
    "mail": ["teste@empresa.com"],
    "userPassword": "senha123",
    "organizationalUnits": ["Teste"]
}' "Criando usu√°rio de teste"

# Teste 5: Buscar usu√°rio criado
test_route "GET" "/api/ldap/users/teste.user" "" "Buscando usu√°rio espec√≠fico"

# Teste 6: Atualizar usu√°rio
test_route "PUT" "/api/ldap/users/teste.user" '{"givenName": "Usu√°rio Atualizado"}' "Atualizando dados do usu√°rio"

# Teste 7: Buscar usu√°rio ap√≥s atualiza√ß√£o
test_route "GET" "/api/ldap/users/teste.user" "" "Verificando dados atualizados"

# Teste 8: Tentar criar usu√°rio duplicado (deve falhar)
test_route "POST" "/api/ldap/users" '{
    "uid": "teste.user",
    "givenName": "Usu√°rio Duplicado",
    "sn": "Teste",
    "employeeNumber": "99999",
    "mail": ["duplicado@empresa.com"],
    "userPassword": "senha123"
}' "Tentando criar usu√°rio duplicado (deve falhar)"

# Teste 9: Tentar criar usu√°rio com dados inv√°lidos (deve falhar)
test_route "POST" "/api/ldap/users" '{
    "uid": "teste.invalido",
    "givenName": "",
    "sn": "",
    "employeeNumber": "",
    "mail": [],
    "userPassword": "123"
}' "Tentando criar usu√°rio com dados inv√°lidos (deve falhar)"

# Teste 10: Excluir usu√°rio de teste
test_route "DELETE" "/api/ldap/users/teste.user" "" "Excluindo usu√°rio de teste"

# Teste 11: Verificar se usu√°rio foi exclu√≠do
test_route "GET" "/api/ldap/users/teste.user" "" "Verificando se usu√°rio foi exclu√≠do (deve falhar)"

echo "‚úÖ Testes conclu√≠dos!"
echo ""
echo "üìä Resumo:"
echo "   - Testes de leitura (GET): 4"
echo "   - Testes de cria√ß√£o (POST): 3"
echo "   - Testes de atualiza√ß√£o (PUT): 1"
echo "   - Testes de exclus√£o (DELETE): 1"
echo "   - Testes de valida√ß√£o: 2"
echo ""
echo "üåê Para acessar a interface web:"
echo "   $BASE_URL/ldap-manager"
echo ""
echo "üìù Para mais detalhes, consulte o arquivo ROTAS-TESTE.md" 