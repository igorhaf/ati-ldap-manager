# ========================================
# COMANDOS SSH DIRETOS - COPIE E COLE
# ========================================

# 1. CONECTAR NO SERVIDOR
ssh -p 7654 igor.franca@10.238.124.200
# Senha: 30102024@Real

# 2. ENCONTRAR O PROJETO (execute um dos comandos abaixo)
find /home -name "composer.json" -path "*ati-ldap-manager*" 2>/dev/null
find /var/www -name "composer.json" -path "*ati-ldap-manager*" 2>/dev/null  
find /opt -name "composer.json" -path "*ati-ldap-manager*" 2>/dev/null

# 3. NAVEGAR PARA O DIRET√ìRIO (substitua pelo caminho encontrado)
cd /caminho/completo/do/projeto

# 4. CRIAR SCRIPT DE VERIFICA√á√ÉO R√ÅPIDA
cat > quick-check.sh << 'EOF'
#!/bin/bash
echo "üîç VERIFICA√á√ÉO R√ÅPIDA - $(date)"
echo "================================"
echo "üìÅ PWD: $(pwd)"
echo "üìÇ Arquivos:"
ls -la composer.json .env docker-compose.yml vendor/bin/sail 2>/dev/null || echo "‚ùå Arquivos principais n√£o encontrados"
echo ""
echo "üê≥ Docker:"
if sudo docker ps &> /dev/null; then
    echo "‚úÖ Docker OK"
    sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
else
    echo "‚ùå Docker com problemas"
    sudo systemctl status docker --no-pager | head -5
fi
echo ""
echo "üìÑ .env:"
if [ -f ".env" ]; then
    echo "‚úÖ .env existe"
    echo "APP_ENV: $(grep '^APP_ENV=' .env | cut -d'=' -f2)"
    echo "APP_DEBUG: $(grep '^APP_DEBUG=' .env | cut -d'=' -f2)"
    echo "APP_KEY: $(grep '^APP_KEY=' .env | cut -d'=' -f2 | cut -c1-20)..."
else
    echo "‚ùå .env N√ÉO EXISTE"
fi
echo ""
echo "üåê Teste HTTP:"
curl -s -o /dev/null -w "Status: %{http_code} | Tempo: %{time_total}s\n" http://localhost 2>/dev/null || echo "‚ùå Falha na conex√£o"
curl -s -o /dev/null -w "Status: %{http_code} | Tempo: %{time_total}s\n" http://10.238.124.200 2>/dev/null || echo "‚ùå Falha no IP externo"
echo ""
echo "üìä Recursos:"
echo "Espa√ßo: $(df -h / | tail -1 | awk '{print $4}') livre"
echo "RAM: $(free -h | grep '^Mem' | awk '{print $7}') livre"
EOF

# 5. DAR PERMISS√ÉO E EXECUTAR VERIFICA√á√ÉO
chmod +x quick-check.sh
./quick-check.sh

# 6. SE HOUVER PROBLEMAS, CRIAR SCRIPT DE CORRE√á√ÉO
cat > fix-production.sh << 'EOF'
#!/bin/bash
echo "üîß CORRE√á√ÉO PRODU√á√ÉO - $(date)"
echo "=============================="

# Parar tudo
echo "1Ô∏è‚É£ Parando containers..."
sudo ./vendor/bin/sail down 2>/dev/null
sudo docker stop $(sudo docker ps -q) 2>/dev/null

# Limpar Docker
echo "2Ô∏è‚É£ Limpando Docker..."
sudo docker system prune -f
sudo docker volume prune -f

# Verificar .env
echo "3Ô∏è‚É£ Verificando .env..."
if [ ! -f ".env" ]; then
    sudo cp .env.example .env
    echo "‚úÖ .env criado"
fi

# Corrigir permiss√µes
echo "4Ô∏è‚É£ Corrigindo permiss√µes..."
sudo mkdir -p storage/{app,framework,logs} bootstrap/cache
sudo chmod -R 775 storage bootstrap/cache
sudo chown -R www-data:www-data storage bootstrap/cache 2>/dev/null

# Instalar depend√™ncias se necess√°rio
echo "5Ô∏è‚É£ Verificando depend√™ncias..."
if [ ! -d "vendor" ]; then
    echo "Instalando composer..."
    sudo composer install --no-dev --optimize-autoloader
fi

# Iniciar containers
echo "6Ô∏è‚É£ Iniciando containers..."
sudo ./vendor/bin/sail up -d
echo "Aguardando containers subirem..."
sleep 20

# Configurar aplica√ß√£o
echo "7Ô∏è‚É£ Configurando aplica√ß√£o..."
sudo ./vendor/bin/sail artisan key:generate --force
sudo ./vendor/bin/sail artisan config:clear
sudo ./vendor/bin/sail artisan cache:clear
sudo ./vendor/bin/sail artisan migrate --force

# Testar
echo "8Ô∏è‚É£ Testando..."
sleep 5
status=$(sudo ./vendor/bin/sail exec laravel.test curl -s -o /dev/null -w "%{http_code}" http://localhost 2>/dev/null)
echo "Status HTTP: $status"

if [ "$status" = "200" ]; then
    echo "üéâ SUCESSO! Aplica√ß√£o funcionando!"
    echo "üåê Acesse: http://10.238.124.200"
else
    echo "‚ö†Ô∏è  Ainda com problemas. Logs:"
    sudo ./vendor/bin/sail logs --tail=20
fi

echo ""
echo "üìä Status final:"
sudo ./vendor/bin/sail ps
EOF

# 7. EXECUTAR CORRE√á√ÉO
chmod +x fix-production.sh
./fix-production.sh

# 8. SE AINDA N√ÉO FUNCIONAR, COMANDOS DE DEBUG:

# Ver logs em tempo real
sudo ./vendor/bin/sail logs -f

# Ver status detalhado
sudo ./vendor/bin/sail ps

# Verificar .env
cat .env | grep -E "^(APP_|DB_|LDAP_)"

# Testar conex√£o direta
sudo ./vendor/bin/sail exec laravel.test curl -I http://localhost

# Ver processos dentro do container
sudo ./vendor/bin/sail exec laravel.test ps aux

# Verificar banco de dados
sudo ./vendor/bin/sail artisan migrate:status

# COMANDOS DE EMERG√äNCIA (use com cuidado):

# Reset completo (apaga dados dos containers)
sudo ./vendor/bin/sail down -v
sudo docker system prune -af
sudo ./vendor/bin/sail up -d
./fix-production.sh

# Reinstalar tudo
sudo rm -rf vendor/
sudo composer install --no-dev --optimize-autoloader
./fix-production.sh 